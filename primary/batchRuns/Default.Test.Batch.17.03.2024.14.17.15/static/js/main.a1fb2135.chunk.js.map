{"version":3,"sources":["../../icons/CommandLineIcon.js","../../icons/LandingIcon.js","../../icons/StartIcon.js","../../lib/StringUtils.js","../../styles/colors.js","components/NameValue.tsx","components/Sidebar.tsx","components/TestInfo.tsx","components/common/VerticalLine.tsx","../../config.js","components/StepsInfo.tsx","components/ImageMatchView.tsx","components/TestIcon.tsx","pages/BatchReport/BatchReport.tsx","App.tsx","index.tsx"],"names":["StartIcon","props","SvgIcon","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","x1","y1","x2","y2","LandingIcon","d","ScanTextOperators","contains","id","label","js","equals","notContains","greaterThan","lessThan","formatUserfacingTestId","testId","substr","toUpperCase","msToTime","duration","seconds","Math","floor","minutes","hours","toDateTime","date","dateObj","Date","isNaN","getDate","toLocaleDateString","toLocaleTimeString","getScanTextLabel","step","scanTextLabel","operator","darkBg","darkBg2","secondary","defaultBg","superLight","errorWarm","errorGradient","successGradient","success","separatorStyle","borderBottom","marginBottom","paddingBottom","NameValue","val","name","value","Boolean","style","Typography","variant","ariaLabel","Metrics","appStartupDuration","skippedFramesCount","typoStyle","fontSize","lineHeight","listItemStyle","paddingRight","paddingLeft","CssTextField","withStyles","root","color","fontWeight","borderBottomColor","TextField","CssSelect","Select","renderTestResultRows","test","index","metric","maxValue","testRuns","sort","a","b","parse","map","tr","testRun","TestResultRow","formatedValue","percentage","sec_num","parseInt","formatDuration","display","flexDirection","component","marginRight","flexGrow","alignItems","background","wasSuccessfull","Sidebar","activeTab","onTestSelect","React","searchKey","filter","currentMetric","values","setValues","batchRun","tests","setTests","maxMetricValue","fieldName","Number","MIN_VALUE","forEach","t","max","getMaxValue","defaultTest","search","toLowerCase","filteredTests","includes","title","deviceData","steps","stepResults","length","onChange","e","target","successPercentage","stats","successCount","totalCount","flexBasis","padding","overflow","src","alt","maxWidth","position","className","cx","cy","r","strokeDasharray","strokeDashoffset","justifyContent","top","sx","failCount","createdOn","stepsCount","placeholder","inputProps","MenuItem","Object","keys","List","disablePadding","paddingTop","ListItem","button","divider","onClick","ListItemIcon","minWidth","ListItemText","primary","formatId","ArrowForwardIos","opacity","flex","TestInfo","failStepRef","packageData","appVersions","successSteps","result","failedSteps","isFailedTest","scrollToFailStep","useCallback","scrollContainer","document","getElementById","elementPosition","current","getBoundingClientRect","scrollTo","behavior","useEffect","setTimeout","left","stepsFailedStyle","textDecoration","cursor","marginTop","Grid","container","spacing","item","xs","packageName","firstInstallTime","serial","brand","borderRadius","message","VerticalLine","showTip","borderRight","borderTop","borderLeft","marginLeft","BatchRunExportDataDirName","stepBox","mt","stepType","stepImageIcon","lBox","org","bottom","pStep","stepName","Fragment","StepsInfo","baseSrc","refList","isLandscape","currentRotation","rotationVars","landscape","seascape","console","log","currSResult","currStep","missingStepRuns","i","copy","getArrows","stepHoverDetail","type","isOriginal","stepColor","backgroundColor","lStyleType","screenshot","text","originalFrame","boxStyle","textAlign","renderResult","matches","matchIndex","selection","roi","region","placeHolder","minHeight","showStepImages","orgFrameSrc","screenshotSrc","generateStep","start","end","sDrop","iconDrop","pDrop","longClick","stopOnFingerprintFound","isHorizontalDrag","horizontalDragDirection","ArrowForward","ArrowBack","firstDragPoint","infoStringX","lastDragPoint","verticalDragDirection","ArrowDownward","ArrowUpward","infoStringY","noDesc","stepText","click","icon","TouchApp","drag","dragAndDropGuess","dragDirection","waitForTemplate","HourglassEmpty","waitForDuration","subtype","waitForKeyboard","TextFields","scanText","home","Home","back","KeyboardBackspace","appSwitch","FilterNone","templateAssertion","Search","someContentAssertion","someContentClick","startApp","iosBundleId","stopApp","execScript","CommandLineIcon","language","script","subTest","scanTextAssertion","assertionJs","searchText","scanTextClick","scanTextWait","optional","getStepInfo","isSuccess","ref","createRef","isCopy","border","push","CardHeader","avatar","Avatar","subheader","action","image","whiteSpace","fontFamily","sResult","Box","RectView","match","renderStyle","x","y","size","outline","boxShadow","ImageMatchView","children","rest","rect","TestIcon","bg","stepsWithImage","avatarSrc","lastStep","commonThemeProps","typography","h1","h2","h3","h4","h5","h6","caption","body1","body2","subtitle1","darkTheme","createTheme","palette","main","brightTheme","BatchReport","useRef","useState","setActiveTab","setTest","alert","error","verifyReportData","ThemeProvider","theme","IconButton","right","zIndex","Close","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a1fb2135.chunk.js","sourcesContent":["import React from 'react'\nimport { SvgIcon } from '@material-ui/core'\n\nfunction StartIcon(props) {\n  return (\n    <SvgIcon {...props}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      >\n        <polyline points=\"4 17 10 11 4 5\" />\n        <line x1=\"12\" y1=\"19\" x2=\"20\" y2=\"19\" />\n      </svg>\n    </SvgIcon>\n  )\n}\n\nexport default StartIcon\n","import React from 'react'\nimport { SvgIcon } from '@material-ui/core'\n\nfunction LandingIcon(props) {\n  return (\n    <SvgIcon {...props}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"-10 00 500 500\">\n        <path d=\"M45.989,97.409l-21.813,20.555L5.447,98.089l21.814-20.555L45.989,97.409z\" />\n        <path d=\"M125.485,22.498l-21.811,20.553L84.946,23.176l21.811-20.553L125.485,22.498z\" />\n        <path\n          d=\"M226.65,375.628c12.448,13.211,27.011,24.125,43.031,32.564l130.95-123.396c-7.475-16.492-17.504-31.677-29.954-44.889\n\tL240.007,101.237L95.979,236.956L226.65,375.628z M177.163,252.123l73.166-68.944l48.935,51.931\n\tc18.796,19.946,17.86,51.464-2.086,70.26l-0.819,0.771c-19.946,18.796-51.464,17.858-70.26-2.087L177.163,252.123z\"\n        />\n        <path\n          d=\"M385.073,426.421l22.159-3.438l4.746-21.916c6.283-29.011,5.858-58.136-0.671-85.148L300.118,420.694\n\tC326.692,428.818,355.74,430.972,385.073,426.421z\"\n        />\n        <path\n          d=\"M275.803,284.328l0.819-0.772c7.92-7.463,8.289-19.973,0.828-27.891l-28.381-30.118l-29.538,27.833l28.381,30.118\n\tC255.374,291.417,267.885,291.788,275.803,284.328z\"\n        />\n        <path d=\"M162.857,351.635L53.609,235.697l-40.103,37.789l87.059,92.389L162.857,351.635z\" />\n        <path d=\"M281.367,21.079l-40.103,37.789l109.249,115.938l17.913-61.336L281.367,21.079z\" />\n        <path\n          d=\"M156.518,55.431L135.47,33.094l-21.811,20.553l18.434,19.562l-17.937,16.901L67.01,40.077L45.196,60.632l47.146,50.033\n\tl-17.936,16.901l-18.434-19.562L34.16,128.56l21.048,22.337l18.529,65.835l147.4-138.897L156.518,55.431z\"\n        />\n      </svg>\n    </SvgIcon>\n  )\n}\n\nexport default LandingIcon\n","import React from 'react'\nimport { SvgIcon } from '@material-ui/core'\n\nfunction StartIcon(props) {\n  return (\n    <SvgIcon {...props}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"-60 00 500 500\">\n        <path d=\"m223.652344 484.691406h29.972656v27.308594h-29.972656zm0 0\" />\n        <path d=\"m114.421875 484.691406h29.96875v27.308594h-29.96875zm0 0\" />\n        <path d=\"m282.972656 158.308594c0-18.152344-3.113281-36.082032-8.984375-53.210938h-179.929687c-5.871094 17.128906-8.984375 35.058594-8.984375 53.210938v190.539062h197.898437zm-48.683594 123.824218h-100.53125v-71.355468c0-27.40625 22.296876-49.703125 49.703126-49.703125h1.125c27.40625 0 49.703124 22.296875 49.703124 49.703125zm0 0\" />\n        <path d=\"m202.507812 12.695312-18.484374-12.695312-18.484376 12.695312c-24.46875 16.804688-44.132812 38.292969-57.90625 62.429688h152.777344c-13.769531-24.136719-33.433594-45.625-57.902344-62.429688zm0 0\" />\n        <path d=\"m184.585938 191.046875h-1.125c-10.882813 0-19.730469 8.851563-19.730469 19.730469v41.382812h40.585937v-41.382812c0-10.878906-8.851562-19.730469-19.730468-19.730469zm0 0\" />\n        <path d=\"m312.945312 219.519531v159.300781h55.101563v-126.945312zm0 0\" />\n        <path d=\"m0 378.820312h55.101562v-159.300781l-55.101562 32.355469zm0 0\" />\n        <path d=\"m114.421875 439.441406v30.691406h29.96875v-26.878906h24.644531v68.746094h29.972656v-68.746094h24.644532v26.878906h29.972656v-30.691406l31.664062-60.621094h-202.53125zm0 0\" />\n      </svg>\n    </SvgIcon>\n  )\n}\n\nexport default StartIcon\n","import { CommandLineIcon, LandingIcon, StartIcon } from '../icons'\nimport {\n  ArrowBack,\n  ArrowDownward,\n  ArrowForward,\n  ArrowUpward,\n  FilterNone,\n  Home,\n  HourglassEmpty,\n  KeyboardBackspace,\n  List,\n  Search,\n  TextFields,\n  TouchApp\n} from '@material-ui/icons'\n\nconst ScanTextOperators = {\n  contains: { id: 'contains', label: 'contain', js: 'scannedText.indexOf(\"searchText\") !== -1' },\n  equals: { id: 'equals', label: 'equal', js: 'scannedText === \"searchText\"' },\n  notContains: { id: 'notContains', label: 'not contain', js: 'scannedText.indexOf(\"searchText\") === -1' },\n  greaterThan: { id: 'greaterThan', label: 'be greater than', js: 'parseFloat(scannedText) > parseFloat(\"searchText\")' },\n  lessThan: { id: 'lessThan', label: 'be less than', js: 'parseFloat(scannedText) < parseFloat(\"searchText\")' }\n}\n\nfunction formatUserfacingStepId(stepId) {\n  return stepId.substr(0, 6).toUpperCase()\n}\n\nfunction formatUserfacingTestId(testId) {\n  return testId.substr(0, 6).toUpperCase()\n}\n\n/**\n * @param {String} str\n * @param {String} separator\n */\nfunction stringToSlug(str, separator) {\n  str = str.trim()\n  str = str.toLowerCase()\n\n  // remove accents, swap ñ for n, etc\n  const from = 'åàáãäâèéëêìíïîòóöôùúüûñç·/_,:;'\n  const to = 'aaaaaaeeeeiiiioooouuuunc------'\n\n  for (let i = 0, l = from.length; i < l; i++) {\n    str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i))\n  }\n\n  return str\n    .replace(/[^a-z0-9 -]/g, '') // remove invalid chars\n    .replace(/\\s+/g, '-') // collapse whitespace and replace by -\n    .replace(/-+/g, '-') // collapse dashes\n    .replace(/^-+/, '') // trim - from start of text\n    .replace(/-+$/, '') // trim - from end of text\n    .replace(/-/g, separator)\n}\n/**\n * @param {number} duration in seconds\n */\nfunction formatDuration(duration) {\n  var sec_num = parseInt(duration, 10) // don't forget the second param\n  var hours = Math.floor(sec_num / 3600)\n  var minutes = Math.floor((sec_num - hours * 3600) / 60)\n  var seconds = sec_num - hours * 3600 - minutes * 60\n\n  if (hours < 10) {\n    hours = '0' + hours\n  }\n  if (minutes < 10) {\n    minutes = '0' + minutes\n  }\n  if (seconds < 10) {\n    seconds = '0' + seconds\n  }\n  return hours + ':' + minutes + ':' + seconds\n}\n\n/**\n * Convert ms to human readable time\n * @param duration\n * @returns string\n */\nconst msToTime = duration => {\n  if (!duration) return ''\n  let seconds = Math.floor((duration / 1000) % 60)\n  let minutes = Math.floor((duration / (1000 * 60)) % 60)\n  let hours = Math.floor((duration / (1000 * 60 * 60)) % 24)\n\n  if (hours < 10) {\n    hours = '0' + hours\n  }\n  if (minutes < 10) {\n    minutes = '0' + minutes\n  }\n  if (seconds < 10) {\n    seconds = '0' + seconds\n  }\n  return hours + ':' + minutes + ':' + seconds\n}\n\n/**\n * Convert string to local date time format\n * @param date\n * @returns\n */\nconst toDateTime = date => {\n  if (!date) return ''\n\n  const dateObj = new Date(date)\n\n  if (isNaN(dateObj.getDate())) return ''\n\n  return dateObj.toLocaleDateString() + ' ' + dateObj.toLocaleTimeString()\n}\n\nfunction getRandomCharacter() {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const index = Math.floor((alphabet.length - 1) * Math.random())\n  return alphabet[index]\n}\n\nfunction trim(string, char) {\n  if (char === ']') char = '\\\\]'\n  if (char === '\\\\') char = '\\\\\\\\'\n  return string.replace(new RegExp('^[' + char + ']+|[' + char + ']+$', 'g'), '')\n}\n\nfunction formatDateForFilename(date) {\n  const dateTimeFormat = new Intl.DateTimeFormat('de', {\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric'\n  })\n  const [\n    { value: day },\n    ,\n    { value: month },\n    ,\n    { value: year },\n    ,\n    { value: hour },\n    ,\n    { value: minute },\n    ,\n    { value: second }\n  ] = dateTimeFormat.formatToParts(date)\n  const dateTimeStr = `${year}-${month}-${day}-${hour}-${minute}-${second}`\n  return dateTimeStr\n}\n\nfunction formatDateTime(date) {\n  return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`\n}\n\n/**\n * Similar to grep:\n * 1. Filter each line by looking for a string.\n * 2. Remove removeString\n * 3. Return first line\n * @param {string} string\n * @param {string} search regex eg. \"myVariable=([0-9])\"\n * @returns {string}\n */\nfunction filterMultiline(string, search) {\n  const lines = string.split('\\n')\n  const filteredLines = lines.map(line => line.trim()).filter(line => line.length > 0)\n  const results = []\n  const regex = new RegExp(search)\n\n  filteredLines.forEach(line => {\n    const match = line.match(regex)\n    if (match) {\n      if (match.length > 1) {\n        results.push(match[1].replace('\\r', '').trim())\n      } else {\n        results.push(match[0].replace('\\r', '').trim())\n      }\n    }\n  })\n\n  if (results.length > 1) {\n    console.warn('Multiple lines found:', results)\n    return results[0]\n  } else if (results.length === 1) {\n    return results[0]\n  } else {\n    return null\n  }\n}\n\nfunction truncateStart(string, maxLength) {\n  if (string.length > maxLength) {\n    string = '...' + string.substring(string.length - maxLength, string.length)\n  }\n  return string\n}\n\n/**\n *\n * @param {string} string\n * @param {Object.<string, string>} replaceDict\n * @returns String\n */\nfunction replaceAllDict(string, replaceDict) {\n  for (var key in replaceDict) {\n    // @ts-ignore\n    string = replaceAll(string, key, replaceDict[key])\n  }\n  return string\n}\n/**\n * Replaces all occurenses of a string\n * @param {string} string\n * @param {string} search\n * @param {string} replacement\n */\nfunction replaceAll(string, search, replacement) {\n  return string.split(search).join(replacement)\n}\n\nfunction getScanTextLabel(step) {\n  if (step.scanTextLabel) return step.scanTextLabel\n  return ScanTextOperators[step.operator]?.label\n}\n\n/**\n * Return step name according to the type of step\n * @param step\n * @param type\n * @returns\n */\nconst getStepInfo = (step, type = 'all') => {\n  let start = ''\n  let end = ''\n  let sDrop = ''\n  let iconDrop = null\n\n  const pDrop = step.longClick ? ' and drop' : ''\n\n  if (step.type === 'drop') {\n    if (step.stopOnFingerprintFound) {\n      sDrop = `until fingerprint is found`\n    } else if (step.isHorizontalDrag) {\n      iconDrop = step.horizontalDragDirection > 0 ? ArrowForward : ArrowBack\n      start = `${step.firstDragPoint.infoStringX}`\n      end = `${step.lastDragPoint.infoStringX}`\n      sDrop = `${start} -> ${end}`\n    } else {\n      iconDrop = step.verticalDragDirection > 0 ? ArrowDownward : ArrowUpward\n      start = `${step.firstDragPoint.infoStringY}`\n      end = `${step.lastDragPoint.infoStringY}`\n      sDrop = `${start} -> ${end}`\n    }\n  }\n\n  const allSteps = {\n    click: {\n      icon: TouchApp,\n      primary: step.longClick ? 'Long Click' : 'Click',\n      secondary: 'on fingerprint'\n    },\n    drag: {\n      icon: iconDrop,\n      primary: `Drag ${step.dragAndDropGuess ? 'around' : step?.dragDirection || ''}${pDrop}`,\n      secondary: sDrop\n    },\n    waitForTemplate: {\n      icon: HourglassEmpty,\n      primary: 'Wait',\n      secondary: 'for fingerprint to show'\n    },\n    waitForDuration: {\n      icon: HourglassEmpty,\n      primary: 'Wait',\n      secondary: `for ${step.duration} ms ${step.subtype === 'waitForAnimationFinish' ? ' (screen animation)' : ''}`\n    },\n    waitForKeyboard: {\n      icon: HourglassEmpty,\n      primary: 'Wait',\n      secondary: 'for keyboard to show up'\n    },\n    text: {\n      icon: TextFields,\n      primary: 'Type Text',\n      secondary: `\"${step.text}\"`\n    },\n    scanText: {\n      primary: 'Scan for text',\n      secondary: ''\n    },\n    home: {\n      icon: Home,\n      primary: 'Home press',\n      secondary: ''\n    },\n    back: {\n      icon: KeyboardBackspace,\n      primary: 'Back press',\n      secondary: ''\n    },\n    appSwitch: {\n      icon: FilterNone,\n      primary: 'Show app switch',\n      secondary: ''\n    },\n    templateAssertion: {\n      icon: Search,\n      primary: 'Check specific element',\n      secondary: ''\n    },\n    someContentAssertion: {\n      primary: 'Check some dynamic element',\n      secondary: ''\n    },\n    someContentClick: {\n      primary: 'Click',\n      secondary: 'on some content at x/y'\n    },\n    startApp: {\n      icon: StartIcon,\n      primary: 'Start App',\n      secondary: step.packageName ? step.packageName : step.iosBundleId\n    },\n    stopApp: {\n      icon: LandingIcon,\n      primary: 'Stop App',\n      secondary: step.packageName ? step.packageName : step.iosBundleId\n    },\n    execScript: {\n      icon: CommandLineIcon,\n      primary: step.language === 'cli' ? 'Exec Command Line Script' : 'Exec JavaScript',\n      secondary: step.script\n    },\n    subTest: {\n      icon: List,\n      primary: 'SubTest',\n      secondary: ''\n    },\n    scanTextAssertion: {\n      icon: Search,\n      primary: 'Check for text',\n      secondary: step.assertionJs ? `Check: ${step.assertionJs}` : `Scanned text should ${getScanTextLabel(step)} \"${step.searchText}\"`\n    },\n    scanTextClick: {\n      primary: 'Click on text',\n      secondary: `\"${step.searchText}\"`\n    },\n    scanTextWait: {\n      icon: HourglassEmpty,\n      primary: 'Wait',\n      secondary: step.assertionJs ? `Until true: ${step.assertionJs}` : `Until scanned text ${getScanTextLabel(step)} \"${step.searchText}\"`\n    }\n  }\n\n  const noDesc = 'No description found for this element'\n  const stepText = allSteps[step.type] || {\n    primary: noDesc,\n    secondary: noDesc,\n    icon: TouchApp\n  }\n  if (step.optional) stepText.primary = `Optional ${stepText.primary}`\n\n  return type === 'all' ? stepText : stepText[type]\n}\n\nfunction addReplacementStringsWithEnvVars(str, replaceStrings) {\n  const vars = str.match(/\\$[a-zA-Z0-9_]*/g)\n  vars?.forEach(envVar => {\n    if (!replaceStrings[envVar]) {\n      replaceStrings[envVar] = process.env[envVar.replace('$', '')]\n    }\n  })\n}\n\nexport {\n  stringToSlug,\n  truncateStart,\n  formatDuration,\n  getRandomCharacter,\n  trim,\n  formatDateForFilename,\n  filterMultiline,\n  replaceAll,\n  replaceAllDict,\n  formatUserfacingStepId,\n  formatUserfacingTestId,\n  formatDateTime,\n  msToTime,\n  toDateTime,\n  getStepInfo,\n  addReplacementStringsWithEnvVars,\n  ScanTextOperators\n}\n","const darkBg = '#1e4158'\nconst darkBg2 = '#7692a4'\nconst secondary = '#ad1457'\nconst bg2 = '#f5f5f5'\nconst defaultBg = '#FFFFFF'\nconst invertedFont = '#FFFFFF'\nconst transparentWhite = 'rgba(255, 255, 255, 0.36)'\nconst defaultFont = '#42444a'\nconst lighterFont = '#575757'\nconst lightestFont = '#b4b4b4'\nconst superLight = '#d7d7d7'\nconst error = '#f44336'\nconst errorMedium = '#c93e33'\nconst errorWarm = '#ff7a59'\nconst errorLight = 'rgb(230, 167, 162)'\nconst errorGradient = 'linear-gradient(315deg, rgba(255,167,167,1) 0%, rgba(255,221,173,1) 100%)'\nconst successGradient = 'linear-gradient(315deg, rgba(174,213,129,1) 0%, rgba(249,255,178,1) 100%)'\nconst feedbackGradient = 'linear-gradient(315deg, rgba(3,98,160,1) 0%, rgba(159,95,255,1) 100%)'\nconst warning = '#ffd863'\nconst warningLight = '#f5e49c'\nconst success = '#AED581'\nconst successFont = '#577633'\nconst successLight = '#CDEFA6'\nconst matchColor = '#ff00ff'\nconst turmeric = '#c8d051'\nconst roiColor = successLight\n\nexport {\n  darkBg,\n  darkBg2,\n  secondary,\n  defaultBg,\n  defaultFont,\n  lighterFont,\n  lightestFont,\n  invertedFont,\n  superLight,\n  bg2,\n  error,\n  errorMedium,\n  errorWarm,\n  warning,\n  success,\n  errorLight,\n  errorGradient,\n  successGradient,\n  feedbackGradient,\n  successLight,\n  successFont,\n  transparentWhite,\n  warningLight,\n  matchColor,\n  roiColor,\n  turmeric\n}\n","import { Typography } from '@mui/material'\nimport React from 'react'\nimport { darkBg2 } from '../../../styles/colors'\n\ninterface Props {\n  name: String\n  value: String | number\n}\n\nconst lineStyle = '1px solid ' + darkBg2\n\nconst separatorStyle = {\n  borderBottom: lineStyle,\n  marginBottom: 8,\n  paddingBottom: 6\n}\n\nexport const NameValue = (props: Props) => {\n  const { name, value } = props\n\n  let val\n  if (!Boolean(value) && '' + value !== '0') {\n    val = 'Not available'\n  } else {\n    val = value\n  }\n  return (\n    <div style={separatorStyle}>\n      <Typography variant=\"h3\">{name}</Typography>\n      <Typography variant=\"h2\">{val}</Typography>\n    </div>\n  )\n}\n","import { withStyles } from '@material-ui/core'\nimport { ArrowForwardIos } from '@material-ui/icons'\nimport { List, ListItem, ListItemIcon, ListItemText, MenuItem, Select, TextField, Typography } from '@mui/material'\nimport * as React from 'react'\nimport { TestIcon } from '.'\nimport { formatDuration, formatUserfacingTestId as formatId, toDateTime } from '../../../lib/StringUtils'\nimport { darkBg, darkBg2, defaultBg, errorGradient, errorWarm, success, successGradient, superLight } from '../../../styles/colors'\nimport { StepResult, Test, TestRun } from '../types'\nimport { NameValue } from './NameValue'\n\nconst ariaLabel = { 'aria-label': 'description' }\nconst Metrics: any = {\n  duration: 'Test Run Duration',\n  appStartupDuration: 'App Startup Duration',\n  skippedFramesCount: 'Skipped Frames Count'\n}\ninterface SidebarProps {\n  activeTab: number | null\n  onTestSelect: (index: number, test: Test) => void\n}\n\nconst typoStyle = {\n  fontSize: '0.9rem',\n  lineHeight: '1.3'\n}\n\nconst lineStyle = '1px solid ' + darkBg2\nconst FirstColWidth = 120\n\nconst listItemStyle = {\n  paddingRight: 0,\n  paddingLeft: 0\n}\n\nconst CssTextField = withStyles({\n  root: {\n    '& input': {\n      color: defaultBg,\n      fontWeight: '100'\n    },\n    '& label.Mui-focused': {\n      color: defaultBg\n    },\n    // hover border color\n    '& .MuiInput-underline:hover:before': {\n      borderBottom: '1px solid ' + superLight\n    },\n    '& .MuiInput-underline:before': {\n      borderBottomColor: superLight\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: defaultBg\n    }\n  }\n})(TextField)\n\nconst CssSelect = withStyles({\n  root: {\n    '& input': {\n      color: defaultBg,\n      fontWeight: '100'\n    },\n    '& label.Mui-focused': {\n      color: defaultBg\n    },\n    // hover border color\n    '& .MuiInput-underline:hover:before': {\n      borderBottom: '1px solid ' + superLight\n    },\n    '& .MuiInput-underline:before': {\n      borderBottomColor: superLight\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: defaultBg\n    }\n  }\n})(Select as any)\n\nconst renderTestResultRows = (test: Test, index: number, metric: string, maxValue: number) => {\n  const testRuns: TestRun[] = test.testRuns.sort((a: any, b: any) => Date.parse(b.date) - Date.parse(a.date))\n  return (\n    <>\n      {testRuns.map((tr: TestRun, index: number) => (\n        <TestResultRow key={tr.id} testRun={tr} metric={metric} maxValue={maxValue} />\n      ))}\n    </>\n  )\n}\ninterface TestResultRowProps {\n  testRun: TestRun\n  metric: string\n  maxValue: number\n}\n\nconst TestResultRow = (props: TestResultRowProps) => {\n  const { testRun, metric, maxValue } = props\n  const value = testRun[metric]\n  let formatedValue, percentage\n  if (value) {\n    formatedValue = '' + value\n    switch (metric) {\n      case 'duration':\n        formatedValue = value > 1000 ? formatDuration(value / 1000) : value + ' ms'\n        break\n      case 'appStartupDuration':\n        formatedValue = value + ' ms'\n        break\n    }\n    percentage = (100.0 * value) / maxValue\n  } else {\n    formatedValue = 'N/A'\n    percentage = 0\n  }\n\n  return (\n    <Typography style={{ display: 'flex', flexDirection: 'row' }} variant=\"body2\" component=\"div\">\n      <div style={{ width: FirstColWidth }}>{toDateTime(testRun.date)}</div>\n      <div style={{ marginRight: 10 }}>{formatedValue}</div>\n\n      <div style={{ display: 'flex', flexGrow: 1, alignItems: 'center' }}>\n        <div style={{ height: 3, width: `${percentage}%`, background: testRun.wasSuccessfull ? successGradient : errorGradient }}></div>\n      </div>\n    </Typography>\n  )\n}\nconst getMaxValue = (fieldName: string) => {\n  var maxValue = Number.MIN_VALUE\n\n  batchRun.tests.forEach((t: any) =>\n    t.testRuns.forEach((tr: any) => {\n      if (tr[fieldName]) {\n        maxValue = Math.max(maxValue, tr[fieldName])\n      }\n    })\n  )\n\n  return maxValue\n}\n\nexport const Sidebar = (props: SidebarProps) => {\n  const { activeTab, onTestSelect } = props\n  const [values, setValues] = React.useState({ searchKey: '', filter: 'all', currentMetric: 'duration' })\n  const [tests, setTests] = React.useState(batchRun.tests)\n\n  var maxMetricValue = getMaxValue(values.currentMetric)\n  // active 1st test\n  const defaultTest = React.useCallback((tests: Test[]) => {}, [])\n\n  // filter the tests on the basis of search string or select filter\n  const search = React.useCallback(() => {\n    const { filter } = values\n\n    const searchKey = values.searchKey.toLowerCase()\n\n    if (!searchKey && filter === 'all') {\n      setTests(batchRun.tests)\n      return\n    }\n\n    let filteredTests: any = batchRun.tests\n\n    if (searchKey)\n      filteredTests = filteredTests.filter(\n        (test: Test) =>\n          test?.id?.toLowerCase().includes(searchKey) ||\n          test?.title?.toLowerCase().includes(searchKey) ||\n          test.deviceData?.name?.toLowerCase().includes(searchKey)\n      )\n\n    if (filter && filter !== 'all')\n      filteredTests = filteredTests.filter((test: Test) => {\n        const steps = test?.testRuns[0]?.stepResults.filter((step: StepResult) => step.success === (filter === 'successful')) // get steps according to selected option\n\n        if (filter === 'failed') return steps.length > 0 // if single step is found means it's failed test\n        return steps.length === test?.testRuns[0]?.stepResults.length // else all steps true\n      })\n\n    setTests(filteredTests)\n    defaultTest(filteredTests) // active 1st test by default\n  }, [values, defaultTest])\n\n  // when input changed then do search\n  const onChange = (e: any) => {\n    const { name, value } = e.target\n    setValues({ ...values, [name]: value })\n  }\n\n  React.useEffect(() => {\n    search() // perform search whenever filter OR search input value changed\n  }, [values, search])\n\n  // active 1st test by default\n  React.useEffect(() => {\n    defaultTest(batchRun.tests as any)\n  }, [defaultTest])\n\n  const spacing = 30\n  const successPercentage = (100.0 * batchRun.stats?.successCount) / batchRun.stats?.totalCount\n\n  return (\n    <div\n      id=\"sidebar\"\n      style={{\n        color: 'white',\n        flexBasis: activeTab === null ? '100%' : '50%',\n        height: '100%'\n      }}\n    >\n      <div\n        id=\"left-col\"\n        style={{\n          width: 230,\n          background: darkBg,\n          padding: 60,\n          flexBasis: 'auto',\n          flexGrow: 0,\n          overflow: 'auto'\n        }}\n      >\n        <img src=\"assets/logo.png\" alt=\"logo\" style={{ maxWidth: 140, marginBottom: 100 }} />\n        <div>\n          <Typography variant=\"h3\" component=\"div\">\n            Batch Run Report:\n          </Typography>\n          <Typography variant=\"h1\" component=\"div\" style={{ marginBottom: 26 }}>\n            {batchRun.title}\n          </Typography>\n\n          <div style={{ position: 'relative', marginBottom: spacing }}>\n            <svg width=\"100%\" height=\"100%\" viewBox={`3.8 3.8 34.4 34.4`} className=\"donut\">\n              <circle className=\"donut-ring\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke={errorWarm} strokeWidth=\"2\"></circle>\n\n              <circle\n                className=\"donut-segment\"\n                cx=\"21\"\n                cy=\"21\"\n                r=\"15.91549430918954\"\n                fill=\"transparent\"\n                stroke={success}\n                strokeWidth=\"2.05\"\n                strokeDasharray={successPercentage + ' ' + (100 - successPercentage)}\n                strokeDashoffset={25}\n              ></circle>\n            </svg>\n            <div\n              style={{ position: 'absolute', display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%', height: '100%', top: 0 }}\n            >\n              <Typography sx={typoStyle} component=\"div\" style={{ width: 'fit-content' }}>\n                <div style={{ borderBottom: lineStyle, marginBottom: 4 }}>\n                  {`${batchRun.stats?.failCount} failed`}\n                  <br />\n                  {`${batchRun.stats?.successCount} successfull`}\n                  <br />\n                </div>\n                {`${batchRun.tests?.length} total`}\n              </Typography>\n            </div>\n          </div>\n\n          <NameValue name=\"Batch Run Date:\" value={toDateTime(batchRun?.createdOn)} />\n          <NameValue name=\"Duration:\" value={batchRun.stats?.duration} />\n          <NameValue name=\"Steps Total:\" value={batchRun.stats?.stepsCount} />\n        </div>\n      </div>\n      <div\n        id=\"right-col\"\n        className={activeTab !== null ? 'hideInPrintVersion' : ''}\n        style={{\n          background: darkBg2,\n          flexGrow: 1,\n          display: 'flex',\n          flexDirection: 'column'\n        }}\n      >\n        <div style={{ display: 'flex', marginBottom: 16, padding: 40, paddingBottom: 10, alignItems: 'center' }}>\n          <div style={{ flexBasis: activeTab === null ? '50%' : '100%', display: 'flex' }}>\n            <CssTextField\n              variant=\"standard\"\n              style={{ flexBasis: '44%', flexGrow: 1, marginRight: 30 }}\n              placeholder=\"Search (title, id)\"\n              name=\"searchKey\"\n              onChange={onChange}\n              inputProps={ariaLabel}\n            />\n\n            <CssSelect variant=\"standard\" name=\"filter\" onChange={onChange} value={values.filter} style={{ flexGrow: 1, flexBasis: '10%' }}>\n              <MenuItem value=\"all\">All</MenuItem>\n              <MenuItem value=\"successful\">Successful</MenuItem>\n              <MenuItem value=\"failed\">Failed</MenuItem>\n            </CssSelect>\n          </div>\n          {activeTab === null && (\n            <>\n              <Typography\n                component=\"div\"\n                variant=\"body1\"\n                style={{\n                  paddingRight: 10,\n                  paddingLeft: 30\n                }}\n              >\n                Performance Metric:\n              </Typography>\n              <CssSelect variant=\"standard\" name=\"currentMetric\" onChange={onChange} value={values.currentMetric}>\n                {Object.keys(Metrics).map((metric, index) => (\n                  <MenuItem key={metric} value={metric}>\n                    {Metrics[metric]}\n                  </MenuItem>\n                ))}\n              </CssSelect>\n            </>\n          )}\n        </div>\n\n        <List disablePadding={true} style={{ overflow: 'auto', height: '100%', padding: 40, paddingTop: 0 }}>\n          {tests.map((test: any, index: number) => (\n            <ListItem\n              button\n              divider\n              key={test.id + index}\n              style={listItemStyle}\n              onClick={() => {\n                onTestSelect(index, test)\n              }}\n            >\n              <ListItemIcon sx={{ color: 'white', minWidth: 36 }}>\n                <TestIcon test={test} />\n              </ListItemIcon>\n\n              <ListItemText primary={`${test.title}`} secondary={`ID: ${formatId(test.id)}`} style={{ flexGrow: 1, width: 0 }} />\n\n              <ArrowForwardIos style={{ opacity: activeTab === index ? 1 : 0 }} />\n              {activeTab === null && (\n                <div style={{ flex: 1, flexDirection: 'row', flexGrow: 1 }}>\n                  <div>{renderTestResultRows(test, index, values.currentMetric, maxMetricValue)}</div>\n                </div>\n              )}\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Grid, Typography } from '@mui/material'\nimport { Test } from '../types'\nimport { msToTime, formatUserfacingTestId as formatId, toDateTime } from '../../../lib/StringUtils'\nimport { NameValue } from './NameValue'\nimport { errorGradient, successGradient } from '../../../styles/colors'\n\ninterface Props {\n  test: Test\n  failStepRef: any\n}\n\nexport const TestInfo = (props: Props) => {\n  const { test, failStepRef } = props\n  const testRun = test?.testRuns[0]\n  const packageData = testRun?.appVersions[0]\n  const stepResults = testRun?.stepResults\n\n  const successSteps = stepResults.filter(result => result.success)\n  const failedSteps = stepResults.filter(result => !result.success)\n  const isFailedTest = failedSteps.length > 0\n\n  const scrollToFailStep = React.useCallback(() => {\n    const scrollContainer = document.getElementById('scrollContainer')\n    const elementPosition = failStepRef.current.getBoundingClientRect().top\n    scrollContainer?.scrollTo({\n      top: elementPosition - 80, // so our element in the center of screen (-60 for old design)\n      behavior: 'smooth' //Smooth transition to roll\n    })\n  }, [failStepRef])\n\n  React.useEffect(() => {\n    const scrollContainer = document.getElementById('scrollContainer')\n    if (isFailedTest) {\n      setTimeout(() => scrollToFailStep(), 600) // delay scroll so images get loaded\n      return\n    }\n    scrollContainer?.scrollTo({ top: 0, left: 0, behavior: 'auto' }) // if not failed step then scroll to top\n  }, [test.id, isFailedTest, failStepRef, scrollToFailStep])\n\n  const stepsFailedStyle = { fontSize: '1rem', textDecoration: 'auto', cursor: 'auto' }\n  if (failedSteps.length > 0) {\n    stepsFailedStyle.textDecoration = 'underline'\n    stepsFailedStyle.cursor = 'pointer'\n  }\n\n  if (!testRun) {\n    return null\n  }\n\n  return (\n    <div>\n      <Typography variant=\"h1\" component=\"div\" style={{ marginBottom: 20, marginTop: 7 }}>\n        {test.title} (ID: {formatId(test.id)})\n      </Typography>\n      <Grid container spacing={3} style={{ marginBottom: 20 }}>\n        <Grid item xs={6}>\n          <NameValue name=\"Test created:\" value={toDateTime(test?.createdOn)} />\n          <NameValue name=\"Test run date:\" value={toDateTime(testRun?.date)} />\n          <NameValue name=\"Test run duration:\" value={msToTime(testRun?.duration)} />\n        </Grid>\n        <Grid item xs={6}>\n          <NameValue name=\"Device:\" value={test?.deviceData?.name} />\n          <NameValue name=\"Package name:\" value={packageData?.packageName} />\n          <NameValue name=\"Install date:\" value={toDateTime(packageData?.firstInstallTime)} />\n        </Grid>\n        <Grid item xs={12} style={{ paddingTop: 0 }}>\n          <NameValue\n            name=\"Device:\"\n            value={\n              test.deviceData.serial === testRun.deviceData.serial\n                ? `created & executed on ${test.deviceData.name} - ${test.deviceData.brand} (${test.deviceData.serial})`\n                : `created on ${test.deviceData.name} - ${test.deviceData.brand} / executed on ${testRun.deviceData.name} - ${testRun.deviceData.brand}`\n            }\n          />\n        </Grid>\n      </Grid>\n\n      <div\n        style={{\n          borderRadius: 4,\n          padding: 10,\n          background: testRun.wasSuccessfull ? successGradient : errorGradient\n        }}\n      >\n        <Typography sx={{ fontSize: '1rem' }} variant=\"h6\">\n          {`${test.steps?.length} steps: ${successSteps.length} successful / `}\n          <Typography component=\"span\" sx={stepsFailedStyle} variant=\"h6\" onClick={() => (failedSteps.length > 0 ? scrollToFailStep() : null)}>\n            {`${failedSteps.length}  failed`}\n          </Typography>\n        </Typography>\n\n        {isFailedTest && (\n          <Typography sx={{ fontSize: '1rem' }} variant=\"h6\">\n            Status Message:{` ${failedSteps[0]?.message}`}\n          </Typography>\n        )}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { superLight } from '../../../../styles/colors'\n\ninterface Props {\n  height?: string\n  top?: string\n  left?: string\n  showTip?: boolean\n}\n\nexport const VerticalLine = (props: Props) => {\n  const { height, showTip = true } = props\n  return (\n    <div\n      className=\"vl\"\n      style={{\n        borderRight: `2px solid ${superLight}`,\n        height: height || '30px'\n        // marginTop: '5px'\n      }}\n    >\n      {showTip && (\n        <div\n          className=\"point\"\n          style={{\n            position: 'absolute',\n            borderTop: `12px solid ${superLight}`,\n            borderRight: '8px solid transparent',\n            borderLeft: '8px solid transparent',\n            marginLeft: '-7px',\n            top: '100%'\n          }}\n        ></div>\n      )}\n    </div>\n  )\n}\n","export default {\n  STORE_VERSION: 14,\n  TEST_FORMAT_VERSION: 3,\n  STORE_VERSION_KEY: 'db_store_version',\n  STORE_KEY: 'db_store'\n}\n\n/**\n * This is the root of our data store.\n * It holds all the business data as well as all the application UI state data (-> uiStore)\n * In the future all non-ui data should be synced to a server, so team collaborators can access the same tests\n */\nexport const ROOT_TREE_NODE_ID = 'ROOT_TREE_NODE_ID'\n//export const FIRST_TEST_BATCH_ID = 'DEFAULT_BATCH_ID'\n\nexport const DEFAULT_FOLDERS_SNAPSHOT = {\n  id: ROOT_TREE_NODE_ID,\n  title: 'All tests',\n  children: [{ id: 'default-node', title: 'Recorded tests', children: [] }] // create a single default folder\n}\n\nexport const BatchRunExportDataDirName = 'data'\n","import React from 'react'\nimport { Box, Typography, Avatar, CardHeader } from '@mui/material'\nimport { success, error, turmeric, superLight, errorGradient, successGradient, errorWarm, errorMedium, successFont } from '../../../styles/colors'\nimport { Step, StepResult, Test } from '../types'\nimport { formatUserfacingTestId as formatId, toDateTime, getStepInfo } from '../../../lib/StringUtils'\nimport { VerticalLine } from './common'\nimport { ImageMatchView } from '.'\nimport { BatchRunExportDataDirName } from '../../../config'\n\ninterface Props {\n  test: Test\n  failStepRef: React.MutableRefObject<null>\n}\n\nconst stepBox: any = {\n  display: 'flex',\n  flexDirection: 'column',\n  mt: '10px',\n  justifyContent: 'center',\n  alignItems: 'center',\n  position: 'relative'\n}\n\nconst stepType = {\n  fontSize: '0.7rem',\n  color: 'rgba(0, 0, 0, 0.6)'\n}\n\nconst stepImageIcon: React.CSSProperties = {\n  width: '3rem',\n  height: '2.5rem'\n  // margin: '11px'\n}\n\nconst hBox: any = (org = true) => {\n  return {\n    position: 'absolute',\n    bottom: 0,\n    textAlign: 'center',\n    width: '100%',\n    borderRadius: '0 0 4px 4px'\n  }\n}\n\nconst lBox: any = (org = true) => {\n  return {\n    position: 'absolute',\n    width: '600px',\n    bottom: org ? '200px' : '0'\n  }\n}\n\n// const lTypoStyle: any = {\n//   text: { p: 1, float: 'left' },\n//   date: { p: 1, float: 'right' }\n// }\n// const hTypoStyle: any = {\n//   text: { pt: 1 },\n//   date: { pb: 1 }\n// }\n\nconst pStep = (step: Step, stepName: string) => (\n  <React.Fragment>\n    <span>{stepName}</span>\n    <span style={stepType}>{` ID: ${formatId(step?.id)}`}</span>\n  </React.Fragment>\n)\n\nexport const StepsInfo = (props: Props) => {\n  const { test, failStepRef } = props\n  const testRun = test?.testRuns[0]\n\n  if (!testRun) {\n    return null\n  }\n  const stepResults = [...testRun?.stepResults] // as we are updating stepResults later so to avoid updating original data\n  const baseSrc = `./${BatchRunExportDataDirName}/${test.id}`\n  const refList: React.RefObject<HTMLImageElement>[] = []\n  const deviceData = testRun.deviceData\n  const isLandscape =\n    deviceData.currentRotation === deviceData.rotationVars.landscape || deviceData.currentRotation === deviceData.rotationVars.seascape\n  console.log('test', test.title, 'testRun.dd', testRun.deviceData)\n  let currSResult: StepResult | null = null\n  let currStep: Step | null = null\n\n  const stepImage = (name: string, style: React.CSSProperties) => (\n      <React.Fragment>\n        <img style={style} src={name} alt={test.id} />\n      </React.Fragment>\n    )\n\n    // verify if there are any missing steps due to failed step\n  ;(() => {\n    const stepsCount = test?.steps?.length\n    const stepRunsCount = stepResults?.length\n    const missingStepRuns = stepsCount - stepRunsCount\n\n    // copy the original steps to stepResults for rendering\n    if (missingStepRuns > 0) {\n      const startCopyFrom = stepsCount - missingStepRuns\n\n      for (let i = startCopyFrom; i < stepsCount; i++) {\n        // console.log('CopyingStep', test?.steps[i]);\n        stepResults[i] = {} as any\n        stepResults[i].step = test?.steps[i]\n        stepResults[i].success = false\n        stepResults[i].copy = true // just to keep record it's copied step\n      }\n    }\n  })()\n\n  // arrows to point out towards the next step\n  const getArrows = (index: number) => {\n    const nextStep = stepResults[index]\n    if (!nextStep) return\n    // const currStep = stepResults[index - 1]\n    return <VerticalLine height=\"30px\" />\n  }\n\n  // data to show on image hover\n  const stepHoverDetail = (type: string, isLandscape = true) => {\n    const isOriginal = type === 'org'\n    const stepColor = currSResult?.success ? success : errorWarm // success in case if test passed\n    const backgroundColor = isOriginal ? success : stepColor // original screenshot will always be success\n    const lStyleType = isOriginal ? !!currSResult?.screenshot : false // landscape box positioning if testRun screenshot exist\n    const hStyleType = isOriginal ? true : !currStep?.originalFrame // horizontal box left right prop if original screenshot exist\n    const text = isOriginal ? 'Original' : 'Test Run'\n    const date = isOriginal ? (currStep?.createdOn as string) : (currSResult?.createdOn as string)\n    const boxStyle = isLandscape ? lBox(lStyleType) : hBox(hStyleType) // horizontal box or landscape box\n    // const typoStyle = isLandscape ? lTypoStyle : hTypoStyle // horizontal typo or landscape\n\n    return (\n      <div className=\"info\" style={{ ...boxStyle, backgroundColor, paddingTop: 10, height: 55 }}>\n        <Typography variant=\"body1\">{text} Screenshot</Typography>\n        <Typography variant=\"body2\">{toDateTime(date)}</Typography>\n      </div>\n    )\n  }\n\n  // show horizontal image & add hover detail\n  const renderResult = (src: string, type: string) => {\n    //const { roi } = calculateRoi(currStep as Step)\n\n    const matches = type === 'org' ? currStep?.matches : currSResult?.matches\n\n    return (\n      <div className=\"matchResult\" style={{ flexBasis: '50%', position: 'relative' }}>\n        <ImageMatchView\n          matchIndex={currStep?.matchIndex}\n          matches={matches}\n          selection={currStep?.selection}\n          roi={currStep?.region}\n          width={200}\n          src={src}\n        />\n\n        {stepHoverDetail(type, false)}\n      </div>\n    )\n  }\n\n  const placeHolder = (type: any) => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexGrow: 1,\n          position: 'relative',\n          backgroundColor: superLight,\n          borderRadius: 4,\n          minHeight: 300\n        }}\n      >\n        <Typography>Not available</Typography>\n        {stepHoverDetail(type, false)}\n      </div>\n    )\n  }\n\n  // show original and step run images\n  const showStepImages = (index: number) => {\n    const orgFrameSrc = `${baseSrc}/${currStep?.originalFrame}`\n    const screenshotSrc = `${baseSrc}/testRuns/${testRun.deviceData?.serial}/${currSResult?.screenshot}`\n\n    return (\n      <div style={{ display: 'flex', flexDirection: isLandscape ? 'column' : 'row' }}>\n        {currStep?.originalFrame ? renderResult(orgFrameSrc, 'org') : placeHolder('org')}\n        <div style={{ height: 10, width: 10 }}></div>\n        {currSResult?.screenshot ? renderResult(screenshotSrc, 'testRun') : placeHolder('testRun')}\n      </div>\n    )\n  }\n\n  const generateStep: any = (index: number) => {\n    const stepName = getStepInfo(currStep as Step)\n    const isSuccess = currSResult?.success\n    // const stepBG = currSResult?.copy ? '#bdbdbd' : isSuccess ? success : error\n    const ref: React.RefObject<HTMLImageElement> = React.createRef()\n    const isCopy = currSResult?.copy\n    const border = `0px solid ${!isSuccess ? error : turmeric}`\n\n    refList.push(ref)\n\n    return (\n      <>\n        <div\n          ref={!isCopy && !isSuccess ? failStepRef : null}\n          style={{\n            minWidth: 600,\n            maxWidth: 600,\n            border: isCopy ? '' : border\n          }}\n        >\n          <CardHeader\n            avatar={\n              <Avatar style={{ backgroundColor: isSuccess ? success : errorWarm }} aria-label=\"step-no\">\n                {stepName.icon && <stepName.icon />}\n              </Avatar>\n            }\n            title={pStep(currStep as Step, stepName.primary)}\n            subheader={stepName.secondary}\n            action={currStep?.image && <>{stepImage(`${baseSrc}/${currStep?.image}`, stepImageIcon)}</>}\n            style={{}}\n          />\n\n          <div\n            style={{\n              overflow: 'hidden',\n              position: 'relative',\n              borderBottom: '2px solid ' + superLight,\n              paddingBottom: 20\n            }}\n          >\n            {showStepImages(index)}\n            {currSResult?.message && (\n              <div\n                style={{\n                  borderRadius: 4,\n                  padding: 10,\n                  marginTop: 10,\n                  background: isSuccess ? successGradient : errorGradient\n                }}\n              >\n                <Typography variant=\"body2\" sx={{ color: isSuccess ? successFont : errorMedium, whiteSpace: 'pre-wrap', fontFamily: 'monospace' }}>\n                  {currSResult?.message}\n                </Typography>\n              </div>\n            )}\n          </div>\n\n          {/* <CardActions disableSpacing></CardActions> */}\n        </div>\n\n        {getArrows(index + 1)}\n      </>\n    )\n  }\n\n  return (\n    <>\n      {stepResults.length &&\n        stepResults.map((sResult, index: number) => {\n          const opacity = sResult?.copy ? '0.5' : '1'\n          currSResult = sResult\n          currStep = sResult.step\n\n          // if (currStep.type === 'subTest') return null // this is an extra step recieving from repeato studio so skip it\n\n          return (\n            <Box className=\"stepCard\" sx={{ ...stepBox, opacity }} key={index}>\n              {generateStep(index)}\n            </Box>\n          )\n        })}\n    </>\n  )\n}\n","import React from 'react'\nimport { matchColor, roiColor } from '../../../styles/colors'\n\nconst RectView = ({ match, opacity, style }: any) => {\n  let renderStyle: any = {\n    position: 'absolute',\n    fontSize: 9,\n    left: `${match?.position?.x * 100}%`,\n    top: `${match?.position?.y * 100}%`,\n    width: `${match?.size?.width * 100}%`,\n    height: `${match?.size?.height * 100}%`,\n    opacity: opacity ? opacity : 1,\n    outline: `2px solid ${matchColor}`,\n    boxShadow: '0px 0px 40px 32px #0000006b'\n  }\n\n  if (style) {\n    renderStyle = { ...renderStyle, ...style }\n  }\n\n  return <div style={renderStyle}>{/*p: {match.probability.toFixed(3)}*/}</div>\n}\n\nexport const ImageMatchView = (props: any) => {\n  const borderRadius = 5\n  const { matchIndex, matches, selection, roi, maxWidth, style, src, children, ...rest } = props\n\n  return (\n    <div\n      {...rest}\n      style={{\n        position: 'relative',\n        overflow: 'hidden',\n        maxWidth: maxWidth,\n        borderRadius,\n        ...style\n      }}\n    >\n      <img src={src} width=\"100%\" alt=\"ImageMatchView\" style={{ borderRadius, display: 'block' }} />\n\n      {matches && matches.length\n        ? matches.map((match: any, index: any) => <RectView key={index} match={match} opacity={index === matchIndex ? 1 : 0.25} />)\n        : selection && <RectView rect={selection} />}\n\n      {roi && (\n        <RectView\n          rect={roi}\n          style={{\n            color: roiColor\n            // border: `1px solid ${successLight}`,\n            // outline: '1000px solid #510000b5'\n          }}\n        />\n      )}\n      {children}\n    </div>\n  )\n}\n","import * as React from 'react'\nimport ListIcon from '@material-ui/icons/List'\nimport { Avatar } from '@material-ui/core'\nimport { Test } from '../types'\nimport { success, bg2, errorWarm } from '../../../styles/colors'\nimport { BatchRunExportDataDirName } from '../../../config'\n\ninterface TestIconProps {\n  test: Test\n}\n\nexport const TestIcon = (props: TestIconProps) => {\n  const { test } = props\n\n  const baseSrc = `./${BatchRunExportDataDirName}/${test.id}`\n  const avatarStyle = { width: 18, height: 18 }\n  const testRun = test?.testRuns[0]\n  const bg = testRun ? (testRun.wasSuccessfull ? success : errorWarm) : bg2\n  const stepsWithImage = test.steps.filter(step => Boolean(step.image))\n  const icon = <ListIcon />\n\n  let avatarSrc = ''\n\n  if (stepsWithImage.length > 0) {\n    const lastStep = stepsWithImage[stepsWithImage.length - 1]\n    avatarSrc = `${baseSrc}/${lastStep.originalFrame}`\n  }\n\n  const avatar = (\n    <Avatar src={avatarSrc} style={avatarStyle}>\n      {icon}\n    </Avatar>\n  )\n\n  return (\n    <div className=\"stack-container\">\n      <div style={{ borderRadius: '50%', border: `2px solid ${bg}` }}>{avatar}</div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { IconButton, ThemeProvider } from '@mui/material'\nimport { Sidebar, StepsInfo, TestInfo } from '../../components'\nimport { createTheme } from '@material-ui/core'\nimport { darkBg, darkBg2, lighterFont, lightestFont, secondary, transparentWhite } from '../../../../styles/colors'\nimport { Close } from '@material-ui/icons'\nimport { Test } from '../../types'\n\nconst commonThemeProps = {\n  typography: {\n    h1: {\n      fontSize: '1.7rem',\n      fontWeight: 200\n    },\n    h2: {\n      fontSize: '1.2rem',\n      fontWeight: 200\n    },\n    h3: {\n      fontSize: '0.8rem',\n      fontWeight: 200,\n      color: darkBg2,\n      marginBottom: 3\n    },\n    h4: {\n      fontSize: '0.7rem',\n      fontWeight: 200\n    },\n    h5: {\n      fontSize: '0.5rem',\n      fontWeight: 200\n    },\n    h6: {\n      // dialog title\n      fontSize: '1.2rem',\n      fontWeight: 200\n    },\n    caption: {\n      // dialog title\n      color: '#999999',\n      fontSize: '0.7rem'\n    },\n    body1: {\n      fontWeight: 200\n    },\n    body2: {\n      fontSize: '0.7rem',\n      fontWeight: 200\n    },\n    subtitle1: {\n      // why does this not work?\n      fontWeight: 200\n    }\n  }\n}\n\nconst darkTheme = createTheme({\n  ...commonThemeProps,\n  palette: {\n    type: 'dark',\n    primary: {\n      main: darkBg\n    },\n    secondary: {\n      main: secondary\n    }\n  }\n})\n\nconst brightTheme = createTheme({\n  ...commonThemeProps,\n  palette: {\n    type: 'light',\n    text: {\n      primary: lighterFont,\n      secondary: lightestFont\n    },\n    primary: {\n      main: darkBg\n    },\n    secondary: {\n      main: secondary\n    }\n  }\n})\nbrightTheme.typography.h1.color = darkBg\nbrightTheme.typography.h2.color = darkBg\n\nexport const BatchReport = (props: any) => {\n  // using index number for selected test - can't used test.id as test can be duplicated in single batch\n\n  const failStepRef = React.useRef(null)\n\n  const [activeTab, setActiveTab] = React.useState<number | null>(null)\n  const [test, setTest] = React.useState<Test | null>(null)\n\n  // verify the report data is valid or not\n  const verifyReportData = () => {\n    try {\n      if (!batchRun?.id || !batchRun?.tests) {\n        alert('Invalid data OR Report file.')\n        return\n      }\n    } catch (error) {\n      alert('Invalid data OR Report file.')\n    }\n  }\n\n  React.useEffect(() => {\n    verifyReportData()\n  }, [])\n\n  return (\n    <>\n      <ThemeProvider theme={darkTheme}>\n        <Sidebar\n          activeTab={activeTab}\n          onTestSelect={(index, test) => {\n            setActiveTab(index)\n            setTest(test)\n          }}\n        />\n      </ThemeProvider>\n\n      <ThemeProvider theme={brightTheme}>\n        {test && (\n          <>\n            <IconButton\n              id=\"closeButton\"\n              style={{ position: 'fixed', right: 30, top: 40, backgroundColor: transparentWhite, zIndex: 100 }}\n              onClick={() => {\n                setActiveTab(null)\n                setTest(null)\n              }}\n            >\n              <Close />\n            </IconButton>\n            <div id=\"scrollContainer\" style={{ flexGrow: 1, overflow: 'scroll', padding: 40 }}>\n              <>\n                <TestInfo test={test} failStepRef={failStepRef} />\n                <StepsInfo test={test} failStepRef={failStepRef} />\n              </>\n            </div>\n          </>\n        )}\n      </ThemeProvider>\n    </>\n  )\n}\n","import React from 'react'\nimport './App.css'\nimport { BatchReport } from './pages'\n\nfunction App() {\n  return <BatchReport />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}